/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IInterpreterV1Interface extends utils.Interface {
  functions: {
    "eval(uint256,uint256[][])": FunctionFragment;
    "evalWithNamespace(uint256,uint256,uint256[][])": FunctionFragment;
    "functionPointers()": FunctionFragment;
    "stateChanges(uint256[])": FunctionFragment;
    "stateChangesWithNamespace(uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "eval",
    values: [BigNumberish, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "evalWithNamespace",
    values: [BigNumberish, BigNumberish, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionPointers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stateChanges",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stateChangesWithNamespace",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "eval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evalWithNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionPointers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateChangesWithNamespace",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IInterpreterV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInterpreterV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eval(
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        stack: BigNumber[];
        stateChanges: BigNumber[];
      }
    >;

    evalWithNamespace(
      namespace: BigNumberish,
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        stack: BigNumber[];
        stateChanges: BigNumber[];
      }
    >;

    functionPointers(overrides?: CallOverrides): Promise<[string]>;

    stateChanges(
      stateChanges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stateChangesWithNamespace(
      namespace: BigNumberish,
      stateChanges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  eval(
    dispatch: BigNumberish,
    context: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      stack: BigNumber[];
      stateChanges: BigNumber[];
    }
  >;

  evalWithNamespace(
    namespace: BigNumberish,
    dispatch: BigNumberish,
    context: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      stack: BigNumber[];
      stateChanges: BigNumber[];
    }
  >;

  functionPointers(overrides?: CallOverrides): Promise<string>;

  stateChanges(
    stateChanges: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stateChangesWithNamespace(
    namespace: BigNumberish,
    stateChanges: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    eval(
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        stack: BigNumber[];
        stateChanges: BigNumber[];
      }
    >;

    evalWithNamespace(
      namespace: BigNumberish,
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        stack: BigNumber[];
        stateChanges: BigNumber[];
      }
    >;

    functionPointers(overrides?: CallOverrides): Promise<string>;

    stateChanges(
      stateChanges: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    stateChangesWithNamespace(
      namespace: BigNumberish,
      stateChanges: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    eval(
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evalWithNamespace(
      namespace: BigNumberish,
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionPointers(overrides?: CallOverrides): Promise<BigNumber>;

    stateChanges(
      stateChanges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stateChangesWithNamespace(
      namespace: BigNumberish,
      stateChanges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    eval(
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evalWithNamespace(
      namespace: BigNumberish,
      dispatch: BigNumberish,
      context: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionPointers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateChanges(
      stateChanges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stateChangesWithNamespace(
      namespace: BigNumberish,
      stateChanges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
